from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

# Dummy AI correction function (replace with real AI model or API call)
def correct_text(input_text):
    # Ovo je samo placeholder koji "popravlja" poznate greške
    corrections = {
        "mroa": "mora",
        "bifp": "biti",
        "gotog": "gotovo",
        "nisat": "ništa",
    }
    words = input_text.split()
    corrected = [corrections.get(word, word) for word in words]
    return " ".join(corrected)

@csrf_exempt
def correct_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            raw_text = data.get('text', '')
            corrected_text = correct_text(raw_text)
            return JsonResponse({'corrected': corrected_text})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    return JsonResponse({'error': 'Invalid method'}, status=405)

# In urls.py add:
# from django.urls import path
# from .views import correct_view
# urlpatterns = [
#     path('correct/', correct_view, name='correct_view'),
# ]

# Frontend example (basic HTML + JS):
# <textarea id="raw"></textarea>
# <button onclick="sendText()">Ispravi</button>
# <p id="result"></p>
# <script>
# function sendText() {
#     fetch('/correct/', {
#         method: 'POST',
#         headers: { 'Content-Type': 'application/json' },
#         body: JSON.stringify({ text: document.getElementById('raw').value })
#     })
#     .then(res => res.json())
#     .then(data => document.getElementById('result').innerText = data.corrected);
# }
# </script>



ONION THREE STEPS 

# Django AI Text Corrector – Faza 1: Ispravka očiglednih grešaka

Ovo je osnovni kod za Django aplikaciju koja prima tekst pun grešaka, koristi OpenAI (ili lokalni AI model) da ispravi očigledne greške i vraća ispravljeni tekst.

## 1. Instalacija
```bash
pip install django openai django-cors-headers
```

## 2. Podešavanja – `settings.py`
Dodaj u `INSTALLED_APPS`:
```python
INSTALLED_APPS = [
    ...
    'corsheaders',
    'textcorrector',  # naša app
]
```
Dodaj middleware:
```python
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]
CORS_ALLOW_ALL_ORIGINS = True
```

## 3. URLs – `urls.py`
```python
from django.urls import path
from textcorrector.views import correct_text

urlpatterns = [
    path('api/correct/', correct_text),
]
```

## 4. View – `views.py`
```python
import openai
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

openai.api_key = 'YOUR_OPENAI_API_KEY'  # zamijeni s tvojim ključem

@csrf_exempt
def correct_text(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        raw_text = data.get('text', '')

        prompt = f"Ispravi tekst tako da bude gramatički tačan i smislen, čak i ako sadrži greške: {raw_text}"

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )

        corrected_text = response.choices[0].message.content.strip()
        return JsonResponse({'corrected': corrected_text})
    return JsonResponse({'error': 'Invalid request'}, status=400)
```

## 5. Frontend – `templates/index.html`
```html
<!DOCTYPE html>
<html>
<head>
  <title>AI Ispravljač Teksta</title>
</head>
<body>
  <h1>Unesi tekst</h1>
  <textarea id="inputText" rows="6" cols="60"></textarea><br>
  <button onclick="sendText()">Ispravi</button>
  <h2>Rezultat:</h2>
  <p id="output"></p>

  <script>
    function sendText() {
      const text = document.getElementById('inputText').value;

      fetch('http://localhost:8000/api/correct/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: text })
      })
      .then(res => res.json())
      .then(data => {
        document.getElementById('output').innerText = data.corrected;
      });
    }
  </script>
</body>
</html>
```



















